#!/usr/bin/env python3

"""
Transmits a tone at one quarter of the sample rate.
"""
import sys
import time
import signal
import numpy as np
import argparse
import SoapySDR
from SoapySDR import *

NUM_MTU = 8

running = True

def signal_handler(sig, frame):
    global running
    print('You pressed Ctrl+C!')
    running = False


def make_tone(n, make_float, fcen, fs, max_value, phi=0.285):

    # Make Complex Valued Tone Signal
    wt = np.array(2 * np.pi * fcen * np.arange(n) / fs)
    sig_cplx = np.exp(1j * (wt + phi))

    if (make_float):
        sig_cf32 = np.empty(2 * n, dtype=np.float32)
        sig_cf32[0::2] = sig_cplx.real
        sig_cf32[1::2] = sig_cplx.imag
        return sig_cf32
    else:
        # Convert to interleaved int16 values
        sig_int16 = np.empty(2 * n, dtype=np.int16)
        sig_int16[0::2] = max_value * sig_cplx.real
        sig_int16[1::2] = max_value * sig_cplx.imag
        return sig_int16


def main(cardno, serial, handle, 
         rate, bw, freq, 
         attenuation, make_float, offset):

    SoapySDR.setLogLevel(SOAPY_SDR_TRACE)

    if serial is None:
        sdr = SoapySDR.Device({"card": cardno,
                               "tx_block_size": "16380"})
    else:
        sdr = SoapySDR.Device({"serial": serial,
                               "tx_block_size": "16380"})

    SoapySDR.setLogLevel(SOAPY_SDR_TRACE)
#    SoapySDR.setLogLevel(SOAPY_SDR_ERROR)

    # get the full scale value for making the tone.
    rc = sdr.getNativeStreamFormat(SOAPY_SDR_TX, handle)
    fullscale = int(rc.fullScale)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"TX fullscale value: {fullscale:,}")

    if (make_float):
        tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CF32, [handle])
    else:
        tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CS16, [handle])

    # make the buffer the size of the MTU * The number of MTU we want in one go
    buff_len=(sdr.getStreamMTU(tx_stream) * NUM_MTU)

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"Tone buffer length is {buff_len:,} words")

    sdr.setTimeSource("1pps_source_external")

    if offset is None:
        offset = rate / 4

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"Tone will be {int(offset):,} Hz above LO")

    tx_buff = make_tone(buff_len, make_float, offset, rate, fullscale)

    # Setup Radio
    sdr.setSampleRate(SOAPY_SDR_TX, handle, rate)

    if bw is not None:
        sdr.setBandwidth(SOAPY_SDR_TX, handle, bw)  
    else:
        sdr.setBandwidth(SOAPY_SDR_TX, handle, (rate * 0.8))  

    sdr.setFrequency(SOAPY_SDR_TX, handle, freq)  

    if attenuation is not None:
        sdr.setGain(SOAPY_SDR_TX, handle, float(attenuation))
        setattenuation = sdr.getGain(SOAPY_SDR_TX, handle)
        SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"actual attenuation: {setattenuation} dB ")
    else:
        sdr.setGain(SOAPY_SDR_TX, handle, float(0))

    sdr.activateStream(tx_stream, SoapySDR.SOAPY_SDR_HAS_TIME)  # this turns the radio on

    total_samps = 0

    last_underruns = 0

    while running:
        try:
            rc = sdr.writeStream(tx_stream, [tx_buff], buff_len)
            if rc.ret != buff_len:
                SoapySDR.log(SoapySDR.SOAPY_SDR_ERROR, 
                             'TX Error {}: {}'.format(rc.ret, errToStr(rc.ret)))
        except KeyboardInterrupt:
            break

        total_samps += buff_len

        if total_samps / rate > 1:
            print(". ", end='', flush=True)
            total_samps = 0

            underruns = sdr.readStreamStatus(tx_stream)
            if last_underruns != underruns.ret:
                print(f"\nunderruns: {underruns.ret}")
                last_underruns = underruns.ret

    sdr.deactivateStream(tx_stream, SoapySDR.SOAPY_SDR_HAS_TIME)  
    sdr.closeStream(tx_stream)


def parse_command_line_arguments():
    """ Create command line options for transmit function """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='tx app template',
                                     formatter_class=help_formatter)

    parser.add_argument('-c', required=False, dest='card',
                        default="0", help='Card number') 
    parser.add_argument('--serial', required=False, dest='serial',
                        default=None, help='Serial number') 
    parser.add_argument('--handle', type=int, required=False, dest='handle',
                        default=0, help='Handle [0 or 1]')
    parser.add_argument('-r', type=float, required=False, dest='rate',
                        default=40e6, help='Sample Rate')
    parser.add_argument('-bw', type=float, required=False, dest='bw',
                        default=None, help='Bandwidth')
    parser.add_argument('-f', type=float, required=False, dest='freq',
                        default=1000e6, help='LO Frequency')
    parser.add_argument('--offset', type=float, required=False, dest='offset',
                        default=None, help='Offset from LO')
    parser.add_argument('-a', type=int, required=False, dest='attenuation',
                        default=35, help='TX gain in dB')
    
    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':
    pars = parse_command_line_arguments()
    signal.signal(signal.SIGINT, signal_handler)


    make_float = False

    main(pars.card, 
        pars.serial, 
        pars.handle, 
        pars.rate, 
        pars.bw, 
        pars.freq, 
        pars.attenuation, 
        make_float,
        pars.offset)
