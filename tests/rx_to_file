#!/usr/bin/env python3

import sys
import time
import numpy as np
import argparse
import SoapySDR
from SoapySDR import *

DEFAULT_NUM_BLOCKS = 1000

def main(cardno, serial, handle, rate, bw, freq, gain, num_blocks, file_name):
    if serial is None:
        args = dict(card = cardno)
    else:
        args = dict(serial = '8N55')

    sdr = SoapySDR.Device(args)

    SoapySDR.setLogLevel(SOAPY_SDR_TRACE)
#    SoapySDR.setLogLevel(SOAPY_SDR_ERROR)

    # go into counter mode to look at data
    #sdr.writeSetting("counter", "true")
    #setting = sdr.readSetting("counter")
    #print("read counter", setting)
    sdr.writeSetting("iq_swap", "true")

    rx_stream = sdr.setupStream(SOAPY_SDR_RX, SOAPY_SDR_CS16, [handle])

    # make the buffer the size of the MTU * The number of MTU we want in one go
    buff_len=(sdr.getStreamMTU(rx_stream) * num_blocks)

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"Buffer length is {buff_len:,} words")

    rx_buff = np.empty(buff_len*2, dtype='<i2')

    # Setup Radio
    sdr.setSampleRate(SOAPY_SDR_RX, handle, rate)
    act_sample_rate = sdr.getSampleRate(SOAPY_SDR_RX, handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"sample rate set to: {act_sample_rate}")

    if bw is not None:
        sdr.setBandwidth(SOAPY_SDR_RX, handle, bw)  
    else:
        sdr.setBandwidth(SOAPY_SDR_RX, handle, (rate * 0.8))  
    act_bw = sdr.getBandwidth(SOAPY_SDR_RX, handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"bw set to: {act_bw}")

    sdr.setFrequency(SOAPY_SDR_RX, handle, freq)  
    act_freq = sdr.getFrequency(SOAPY_SDR_RX, handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"freq set to: {act_freq}")

    if gain is not None:
        sdr.setGainMode(SOAPY_SDR_RX, handle, False)
        sdr.setGain(SOAPY_SDR_RX, handle, float(gain))
        setgain = sdr.getGain(SOAPY_SDR_RX, handle)
        SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"gain set to: {setgain} dB ")
    else:
        sdr.setGainMode(SOAPY_SDR_RX, handle, True)

    sdr.activateStream(rx_stream)  # this turns the radio on

    total_samps = 0

    rc = sdr.readStream(rx_stream, [rx_buff], buff_len)
    if rc.ret != buff_len:
        SoapySDR.log(SoapySDR.SOAPY_SDR_ERROR, f"RX Error {rc.ret} ")
    else:
        SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"Receive is complete, received {rc.ret:,} samples")

    sdr.deactivateStream(rx_stream)
    sdr.closeStream(rx_stream)

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, 
            f"Writing {(buff_len * 4):,} bytes to filename: {file_name}")

    first_10_bytes = rx_buff.tobytes()[:10]
    print('First 10 bytes in hex:', ' '.join(f'{b:02x}' for b in first_10_bytes))

    rx_buff.tofile(f"{file_name}")



def parse_command_line_arguments():
    """ Create command line options for transmit function """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='tx app template',
                                     formatter_class=help_formatter)

    parser.add_argument('-c', required=False, dest='card',
                        default="0", help='Card number') 
    parser.add_argument('--serial', required=False, dest='serial',
                        default=None, help='Serial number') 
    parser.add_argument('--handle', type=int, required=False, dest='handle',
                        default=0, help='Handle [0 or 1]')
    parser.add_argument('-r', type=float, required=False, dest='rate',
                        default=40e6, help='Sample Rate')
    parser.add_argument('-bw', type=float, required=False, dest='bw',
                        default=None, help='Bandwidth')
    parser.add_argument('-f', type=float, required=False, dest='freq',
                        default=1000e6, help='LO Frequency')
    parser.add_argument('-g', type=int, required=False, dest='gain',
                        default=None, help='RX gain, otherwise automatic')
    parser.add_argument('--num-blocks', type=int, required=False, dest='num_blocks',
                        default=DEFAULT_NUM_BLOCKS, help='Number of blocks to collect')
    parser.add_argument('-d', type=str, required=False, dest='dest',
                        default='samples.bin', help='File name where samples are written')

    
    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':
    pars = parse_command_line_arguments()

    make_float = False

    main(pars.card, 
        pars.serial, 
        pars.handle, 
        pars.rate, 
        pars.bw, 
        pars.freq, 
        pars.gain,
        pars.num_blocks,
        pars.dest) 
