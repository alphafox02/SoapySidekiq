#!/usr/bin/env python3

"""
Transmits a tone at one quarter of the sample rate.
"""
import sys
import os
import time
import numpy as np
import argparse
import SoapySDR
from SoapySDR import *

NUM_MTU = 8


def read_binary_file_into_buffers(file_path, buffer_size, num_buffers):
    buffers = []  # To hold the buffers
    first = True

    # Open the binary file in read mode ('rb')
    with open(file_path, 'rb') as f:
        for _ in range(num_buffers):
            # Read buffer_size bytes from the file
            buffer = f.read(buffer_size)

            # If we've reached the end of the file, break the loop
            if not buffer:
                break

            # Convert the buffer into a NumPy array, for example with dtype=np.uint8
            buffer_array = np.frombuffer(buffer, dtype='<i2')
            if first:
                first_10_bytes = buffer_array.tobytes()[:10]

                print('First 10 bytes in hex:', ' '.join(f'{b:02x}' for b in first_10_bytes))
                first = False 

            # Append the buffer array to the list of buffers
            buffers.append(buffer_array)

    return buffers

def main(cardno=0, serial=None, handle=0, 
         rate=20e6, bw=None, freq=1e7, 
         attenuation=100, make_float=False, offset=None):

    if serial is None:
        args = dict(card = cardno)
    else:
        args = dict(serial = '8N55')

    sdr = SoapySDR.Device(args)

    SoapySDR.setLogLevel(SOAPY_SDR_TRACE)
#    SoapySDR.setLogLevel(SOAPY_SDR_ERROR)

    if (make_float):
        tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CF32, [handle])
    else:
        tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CS16, [handle])

    file_path = "samples.bin"

    buffer_size_words = sdr.getStreamMTU(tx_stream)
    
    file_size_bytes = os.path.getsize(file_path)

    file_size_words = file_size_bytes / 4

    num_buffers = int(file_size_words / buffer_size_words)

    tx_buff = read_binary_file_into_buffers(file_path, buffer_size_words, num_buffers)

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"File path is {file_path}")
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"File size is {file_size_bytes:,} bytes")
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"Buffer length is {buffer_size_words:,} words")
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"num_buffers is {num_buffers:,}")

    # Setup Radio
    sdr.setSampleRate(SOAPY_SDR_TX, handle, rate)

    if bw is not None:
        sdr.setBandwidth(SOAPY_SDR_TX, handle, bw)  
    else:
        sdr.setBandwidth(SOAPY_SDR_TX, handle, (rate * 0.8))  

    sdr.setFrequency(SOAPY_SDR_TX, handle, freq)  

    sdr.setGain(SOAPY_SDR_TX, handle, float(attenuation))

    sdr.activateStream(tx_stream)  # this turns the radio on

    total_samps = 0

    while True:
        try:
            for idx in range(num_buffers):
                rc = sdr.writeStream(tx_stream, [tx_buff[idx]], buffer_size_words)
                if rc.ret != buffer_size_words:
                    SoapySDR.log(SoapySDR.SOAPY_SDR_ERROR, 'TX Error {}: {}'.format(rc.ret, 
                                                    errToStr(rc.ret)))

                total_samps += buffer_size_words

                if total_samps / rate > 1:
                    print(". ", end='', flush=True)
                    total_samps = 0

        except KeyboardInterrupt:
            break


    sdr.deactivateStream(tx_stream)
    sdr.closeStream(tx_stream)


def parse_command_line_arguments():
    """ Create command line options for transmit function """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='tx app template',
                                     formatter_class=help_formatter)

    parser.add_argument('-c', required=False, dest='card',
                        default="0", help='Card number') 
    parser.add_argument('--serial', required=False, dest='serial',
                        default=None, help='Serial number') 
    parser.add_argument('--handle', type=int, required=False, dest='handle',
                        default=0, help='Handle [0 or 1]')
    parser.add_argument('-r', type=float, required=False, dest='rate',
                        default=40e6, help='Sample Rate')
    parser.add_argument('-bw', type=float, required=False, dest='bw',
                        default=None, help='Bandwidth')
    parser.add_argument('-f', type=float, required=False, dest='freq',
                        default=1000e6, help='LO Frequency')
    parser.add_argument('--offset', type=float, required=False, dest='offset',
                        default=None, help='Offset from LO')
    parser.add_argument('-a', type=int, required=False, dest='attenuation',
                        default=0, help='TX attenuation')
    
    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':
    pars = parse_command_line_arguments()

    make_float = False

    main(pars.card, 
        pars.serial, 
        pars.handle, 
        pars.rate, 
        pars.bw, 
        pars.freq, 
        pars.attenuation, 
        make_float,
        pars.offset)
