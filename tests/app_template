#!/usr/bin/env python3

"""
Transmits a tone at one quarter of the sample rate.
"""
import sys
import time
import numpy as np
import argparse
import SoapySDR
from SoapySDR import *

NUM_MTU = 8

def make_tone(n, make_float, fcen, fs, phi=0.285):
    """
    Generates tone signal window with a frequency that is an integer
    multiple of the sample rate so it can be repeated without a phase
    discontinuity.
    """
    period = fs / fcen
    #assert n % period == 0, 'Total samples not integer number of periods'
    a = (2**12 / 2) -1
    # Make Complex Valued Tone Signal
    wt = np.array(2 * np.pi * fcen * np.arange(n) / fs)
    sig_cplx = np.exp(1j * (wt + phi))

    if (make_float):
        sig_cf32 = np.empty(2 * n, dtype=np.float32)
        sig_cf32[0::2] = sig_cplx.real
        sig_cf32[1::2] = sig_cplx.imag
        return sig_cf32
    else:
        # Convert to interleaved int16 values
        sig_int16 = np.empty(2 * n, dtype=np.int16)
        sig_int16[0::2] = a * sig_cplx.real
        sig_int16[1::2] = a * sig_cplx.imag
        return sig_int16


def main(cardno=0, serial=None, handle=0, rate=20e6, bw=None, freq=1e7, attenuation=100, make_float=False):
    if serial is not None:
        args = dict(card = cardno)
    else:
        args = dict(serial = '8N55')

    print(f"args {args}");
    sdr = SoapySDR.Device(args)

    SoapySDR.setLogLevel(SOAPY_SDR_TRACE)
#    SoapySDR.setLogLevel(SOAPY_SDR_ERROR)

    if (make_float):
        tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CF32, [handle])
    else:
        tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CS16, [handle])

    # make the buffer the size of the MTU * The number of MTU we want in one go
    buff_len=(sdr.getStreamMTU(tx_stream) * NUM_MTU)
    print("buff_len", buff_len)

    tx_buff = make_tone(buff_len, make_float, 2e6, rate)

    # Setup Radio
    sdr.setSampleRate(SOAPY_SDR_TX, handle, float(rate))

    if bw is not None:
        sdr.setBandwidth(SOAPY_SDR_TX, handle, float(bw))  

    sdr.setFrequency(SOAPY_SDR_TX, handle, float(freq))  

    sdr.setGain(SOAPY_SDR_TX, handle, float(attenuation))

    sdr.activateStream(tx_stream)  # this turns the radio on

    total_samps = 0

    while True:
        try:
            rc = sdr.writeStream(tx_stream, [tx_buff], buff_len)
            if rc.ret != buff_len:
                print('TX Error {}: {}'.format(rc.ret, errToStr(rc.ret)))
        except KeyboardInterrupt:
            break

        total_samps += buff_len
#        print(f"total_samps {total_samps:,}, mod {(total_samps % rate):,}, div {(total_samps / rate):,}")
        
        if total_samps / rate > 1:
            print(". ", end='', flush=True)
            total_samps = 0

    sdr.deactivateStream(tx_stream)
    sdr.closeStream(tx_stream)


def parse_command_line_arguments():
    """ Create command line options for transmit function """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='tx app template',
                                     formatter_class=help_formatter)

    parser.add_argument('-c', required=False, dest='card',
                        default="0", help='Card number') 
    parser.add_argument('--serial', required=False, dest='serial',
                        default=None, help='Serial number') 
    parser.add_argument('--handle', type=int, required=False, dest='handle',
                        default=0, help='Handle [0 or 1]')
    parser.add_argument('-r', type=int, required=False, dest='rate',
                        default=40e6, help='Sample Rate')
    parser.add_argument('-bw', type=int, required=False, dest='bw',
                        default=None, help='Bandwidth')
    parser.add_argument('-f', type=int, required=False, dest='freq',
                        default=1000e6, help='LO Frequency')
    parser.add_argument('-a', type=int, required=False, dest='attenuation',
                        default=0, help='TX attenuation')
    
    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':
    pars = parse_command_line_arguments()

    make_float = False

    main(pars.card, 
        pars.serial, 
        pars.handle, 
        pars.rate, 
        pars.bw, 
        pars.freq, 
        pars.attenuation, 
        make_float)
